service: users

custom:
  stage: "${opt:stage, self:provider.stage}"


provider:
  name: aws
  runtime: nodejs4.3
  stage: dev
  cfLogs: true
  region: eu-west-1
  memorySize: 256
  timeout: 10
  environment: ${file(environment.yml)}
  # or if you have variables for different stages in one file you can load in this way {file(./environment_stages):${self:custom.stage}}


package:
  individually: true
  exclude:
     - lib/**
     - getUser/**
     - deleteUser/**
     - createUser/**
     - updateUser/**
     - listUsers/**

functions:
    update:
        handler: updateUser/index.main
        cfLogs: true
        package:
            include:
              - lib/**
              - updateUser/**
        events:
            - http:
                path: user/{id}
                method: put
                integration: lambda
                authorizer:
                   name: isAuthenticated
                   resultTtlInSeconds: 0
                   identitySource: method.request.header.Authorization
                request:
                   parameters: #Method Request [HTTP REQUEST HEADERS]
                     headers:
                       Authorization: true
                   template: #Integration Request [Body Mapping Templates ]
                       application/json: "{\"user\":\"$context.authorizer.principalId\"}"

                response:
                   headers: #Integration Response [Header Mappings
                      Access-Control-Allow-Origin: "'*'"
                      Access-Control-Allow-Methods: "'PUT, OPTIONS'"
                      Access-Control-Allow-Headers: "'Content-Type, Authorization, Cache-Control, X-Requested-With, If-Modified-Since'"
                   statusCodes:
                      200:
                          pattern: ".*\"status\":200.*"
                          template:
                             application/json: ""
                      400:
                          pattern: ".*\"status\":400.*"
                          template: $input.path("$.errorMessage")
                      500:
                          pattern: ".*\"status\":500.*"
                          template: $input.path("$.errorMessage")
            - http: #Integration request with type MOCK
               path: user/{id}
               method: OPTIONS
               integration: mock
               cors:
                   origins:
                     - '*'
                   methods:
                      - PUT
                      - OPTIONS
               request:
                   template:
                        application/json: "{ \"statusCode\": 200 }"
               response:
                    template:
                         application/json: "{ \"statusCode\": 200 }"
    get:
        handler: getUser/index.main
        cfLogs: true
        package:
            include:
              - lib/**
              - getUser/**
        events:
             - http:
                path: user/{id}
                method: get
             - http:
                 path: user/{id}
                 method: OPTIONS
                 integration: mock
                 cors:
                     origins:
                       - '*'
                     methods:
                        - GET
                        - OPTIONS
                 request:
                     template:
                          application/json: "{ \"statusCode\": 200 }"
                 response:
                      template:
                           application/json: "{ \"statusCode\": 200 }"

    list:
        handler: listUsers/index.main
        cfLogs: true
        package:
            include:
              - lib/**
              - listUsers/**
        events:
            - http:
                path: users
                method: get
                cors:
                  origins:
                    - '*'
            - http:
                path: users
                method: OPTIONS
                integration: mock
                cors:
                    origins:
                      - '*'
                    methods:
                       - GET
                       - OPTIONS
                request:
                    template:
                         application/json: "{ \"statusCode\": 200 }"
                response:
                     template:
                          application/json: "{ \"statusCode\": 200 }"

    create:
        handler: createUser/index.main
        cfLogs: true
        package:
            include:
              - lib/**
              - createUser/**
        events:
            - http:
                path: user
                method: post
                integration: lambda
                authorizer:
                   name: isAuthenticated
                   resultTtlInSeconds: 0
                   identitySource: method.request.header.Authorization
                request:
                   parameters:
                     headers:
                       Authorization: true
                   template:
                       application/json: "{\"user\":\"$context.authorizer.principalId\"}"

                response:
                   headers:
                      Access-Control-Allow-Origin: "'*'"
                      Access-Control-Allow-Methods: "'POST, OPTIONS'"
                      Access-Control-Allow-Headers: "'Content-Type, Authorization, Cache-Control, X-Requested-With, If-Modified-Since'"
                   statusCodes:
                      200:
                          pattern: ".*\"status\":200.*"
                          template:
                             application/json: ""
                      400:
                          pattern: ".*\"status\":400.*"
                          template: $input.path("$.errorMessage")
                      500:
                          pattern: ".*\"status\":500.*"
                          template: $input.path("$.errorMessage")
            - http:
                path: user
                method: OPTIONS
                integration: mock
                cors:
                    origins:
                      - '*'
                    methods:
                       - POST
                       - OPTIONS
                request:
                    template:
                         application/json: "{ \"statusCode\": 200 }"
                response:
                     template:
                          application/json: "{ \"statusCode\": 200 }"

    delete:
        handler: deleteUser/index.main
        cfLogs: true
        package:
            include:
              - lib/**
              - deleteUser/**
        events:
            - http:
                path: user/{id}
                method: delete
                integration: lambda
                authorizer:
                   name: isAuthenticated
                   resultTtlInSeconds: 0
                   identitySource: method.request.header.Authorization
                request:
                   parameters:
                     headers:
                       Authorization: true
                   template:
                       application/json: "{\"user\":\"$context.authorizer.principalId\"}"

                response:
                   headers:
                      Access-Control-Allow-Origin: "'*'"
                      Access-Control-Allow-Methods: "'DELETE, OPTIONS'"
                      Access-Control-Allow-Headers: "'Content-Type, Authorization, Cache-Control, X-Requested-With, If-Modified-Since'"
                   statusCodes:
                      200:
                          pattern: ".*\"status\":200.*"
                          template:
                             application/json: ""
                      400:
                          pattern: ".*\"status\":400.*"
                          template: $input.path("$.errorMessage")
                      500:
                          pattern: ".*\"status\":500.*"
                          template: $input.path("$.errorMessage")

            - http:
                path: user/{id}
                method: OPTIONS
                integration: mock
                cors:
                    origins:
                      - '*'
                    methods:
                       - DELETE
                       - OPTIONS
                request:
                    template:
                         application/json: "{ \"statusCode\": 200 }"
                response:
                     template:
                          application/json: "{ \"statusCode\": 200 }"